// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/organization-goclient/models"
)

// NewPutSubscriptionParams creates a new PutSubscriptionParams object
// with the default values initialized.
func NewPutSubscriptionParams() *PutSubscriptionParams {
	var ()
	return &PutSubscriptionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutSubscriptionParamsWithTimeout creates a new PutSubscriptionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutSubscriptionParamsWithTimeout(timeout time.Duration) *PutSubscriptionParams {
	var ()
	return &PutSubscriptionParams{

		timeout: timeout,
	}
}

// NewPutSubscriptionParamsWithContext creates a new PutSubscriptionParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutSubscriptionParamsWithContext(ctx context.Context) *PutSubscriptionParams {
	var ()
	return &PutSubscriptionParams{

		Context: ctx,
	}
}

// NewPutSubscriptionParamsWithHTTPClient creates a new PutSubscriptionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutSubscriptionParamsWithHTTPClient(client *http.Client) *PutSubscriptionParams {
	var ()
	return &PutSubscriptionParams{
		HTTPClient: client,
	}
}

/*PutSubscriptionParams contains all the parameters to send to the API endpoint
for the put subscription operation typically these are written to a http.Request
*/
type PutSubscriptionParams struct {

	/*OrgID
	  organization id

	*/
	OrgID int32
	/*SubID
	  subscription id

	*/
	SubID int32
	/*Subscription*/
	Subscription *models.Subscription

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put subscription params
func (o *PutSubscriptionParams) WithTimeout(timeout time.Duration) *PutSubscriptionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put subscription params
func (o *PutSubscriptionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put subscription params
func (o *PutSubscriptionParams) WithContext(ctx context.Context) *PutSubscriptionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put subscription params
func (o *PutSubscriptionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put subscription params
func (o *PutSubscriptionParams) WithHTTPClient(client *http.Client) *PutSubscriptionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put subscription params
func (o *PutSubscriptionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrgID adds the orgID to the put subscription params
func (o *PutSubscriptionParams) WithOrgID(orgID int32) *PutSubscriptionParams {
	o.SetOrgID(orgID)
	return o
}

// SetOrgID adds the orgId to the put subscription params
func (o *PutSubscriptionParams) SetOrgID(orgID int32) {
	o.OrgID = orgID
}

// WithSubID adds the subID to the put subscription params
func (o *PutSubscriptionParams) WithSubID(subID int32) *PutSubscriptionParams {
	o.SetSubID(subID)
	return o
}

// SetSubID adds the subId to the put subscription params
func (o *PutSubscriptionParams) SetSubID(subID int32) {
	o.SubID = subID
}

// WithSubscription adds the subscription to the put subscription params
func (o *PutSubscriptionParams) WithSubscription(subscription *models.Subscription) *PutSubscriptionParams {
	o.SetSubscription(subscription)
	return o
}

// SetSubscription adds the subscription to the put subscription params
func (o *PutSubscriptionParams) SetSubscription(subscription *models.Subscription) {
	o.Subscription = subscription
}

// WriteToRequest writes these params to a swagger request
func (o *PutSubscriptionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param orgId
	if err := r.SetPathParam("orgId", swag.FormatInt32(o.OrgID)); err != nil {
		return err
	}

	// path param subId
	if err := r.SetPathParam("subId", swag.FormatInt32(o.SubID)); err != nil {
		return err
	}

	if o.Subscription == nil {
		o.Subscription = new(models.Subscription)
	}

	if err := r.SetBodyParam(o.Subscription); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
