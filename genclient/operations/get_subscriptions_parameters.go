// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSubscriptionsParams creates a new GetSubscriptionsParams object
// with the default values initialized.
func NewGetSubscriptionsParams() *GetSubscriptionsParams {
	var ()
	return &GetSubscriptionsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSubscriptionsParamsWithTimeout creates a new GetSubscriptionsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSubscriptionsParamsWithTimeout(timeout time.Duration) *GetSubscriptionsParams {
	var ()
	return &GetSubscriptionsParams{

		timeout: timeout,
	}
}

// NewGetSubscriptionsParamsWithContext creates a new GetSubscriptionsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSubscriptionsParamsWithContext(ctx context.Context) *GetSubscriptionsParams {
	var ()
	return &GetSubscriptionsParams{

		Context: ctx,
	}
}

// NewGetSubscriptionsParamsWithHTTPClient creates a new GetSubscriptionsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSubscriptionsParamsWithHTTPClient(client *http.Client) *GetSubscriptionsParams {
	var ()
	return &GetSubscriptionsParams{
		HTTPClient: client,
	}
}

/*GetSubscriptionsParams contains all the parameters to send to the API endpoint
for the get subscriptions operation typically these are written to a http.Request
*/
type GetSubscriptionsParams struct {

	/*Active*/
	Active *bool
	/*Limit
	  number of items to return within the query

	*/
	Limit *int32
	/*Offset
	  starting paging count; ex. 60 will skip the first 60 items in the list

	*/
	Offset *int32
	/*PaymentMethod*/
	PaymentMethod *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get subscriptions params
func (o *GetSubscriptionsParams) WithTimeout(timeout time.Duration) *GetSubscriptionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get subscriptions params
func (o *GetSubscriptionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get subscriptions params
func (o *GetSubscriptionsParams) WithContext(ctx context.Context) *GetSubscriptionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get subscriptions params
func (o *GetSubscriptionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get subscriptions params
func (o *GetSubscriptionsParams) WithHTTPClient(client *http.Client) *GetSubscriptionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get subscriptions params
func (o *GetSubscriptionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActive adds the active to the get subscriptions params
func (o *GetSubscriptionsParams) WithActive(active *bool) *GetSubscriptionsParams {
	o.SetActive(active)
	return o
}

// SetActive adds the active to the get subscriptions params
func (o *GetSubscriptionsParams) SetActive(active *bool) {
	o.Active = active
}

// WithLimit adds the limit to the get subscriptions params
func (o *GetSubscriptionsParams) WithLimit(limit *int32) *GetSubscriptionsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get subscriptions params
func (o *GetSubscriptionsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOffset adds the offset to the get subscriptions params
func (o *GetSubscriptionsParams) WithOffset(offset *int32) *GetSubscriptionsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get subscriptions params
func (o *GetSubscriptionsParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WithPaymentMethod adds the paymentMethod to the get subscriptions params
func (o *GetSubscriptionsParams) WithPaymentMethod(paymentMethod *string) *GetSubscriptionsParams {
	o.SetPaymentMethod(paymentMethod)
	return o
}

// SetPaymentMethod adds the paymentMethod to the get subscriptions params
func (o *GetSubscriptionsParams) SetPaymentMethod(paymentMethod *string) {
	o.PaymentMethod = paymentMethod
}

// WriteToRequest writes these params to a swagger request
func (o *GetSubscriptionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Active != nil {

		// query param active
		var qrActive bool
		if o.Active != nil {
			qrActive = *o.Active
		}
		qActive := swag.FormatBool(qrActive)
		if qActive != "" {
			if err := r.SetQueryParam("active", qActive); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.PaymentMethod != nil {

		// query param paymentMethod
		var qrPaymentMethod string
		if o.PaymentMethod != nil {
			qrPaymentMethod = *o.PaymentMethod
		}
		qPaymentMethod := qrPaymentMethod
		if qPaymentMethod != "" {
			if err := r.SetQueryParam("paymentMethod", qPaymentMethod); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
