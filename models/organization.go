package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Organization An organization represents a single entity that contains a group of users
// swagger:model organization
type Organization struct {

	// active
	// Required: true
	Active *bool `json:"active"`

	// city
	// Required: true
	City *string `json:"city"`

	// created UTC time stamp, set server-side, read only field
	Created strfmt.DateTime `json:"created,omitempty"`

	// creating user, set server-side, read only field
	CreatedBy string `json:"createdBy,omitempty"`

	// free trial hours
	FreeTrialHours int64 `json:"freeTrialHours,omitempty"`

	// ID of organization
	ID int64 `json:"id,omitempty"`

	// last modified UTC time stamp, set server-side, read only field
	LastModified strfmt.DateTime `json:"lastModified,omitempty"`

	// modifying user, set server-side, read only field
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// name of organization
	// Required: true
	Name *string `json:"name"`

	// postal code
	// Required: true
	PostalCode *string `json:"postalCode"`

	// id of product this organization is signed up for
	// Required: true
	ProductID *int64 `json:"productId"`

	// running simulation limit
	// Required: true
	RunningSimulationLimit *int64 `json:"runningSimulationLimit"`

	// state
	// Required: true
	State *string `json:"state"`

	// street
	// Required: true
	Street *string `json:"street"`
}

// Validate validates this organization
func (m *Organization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActive(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePostalCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProductID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRunningSimulationLimit(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStreet(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Organization) validateActive(formats strfmt.Registry) error {

	if err := validate.Required("active", "body", m.Active); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("city", "body", m.City); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validatePostalCode(formats strfmt.Registry) error {

	if err := validate.Required("postalCode", "body", m.PostalCode); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateProductID(formats strfmt.Registry) error {

	if err := validate.Required("productId", "body", m.ProductID); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateRunningSimulationLimit(formats strfmt.Registry) error {

	if err := validate.Required("runningSimulationLimit", "body", m.RunningSimulationLimit); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateStreet(formats strfmt.Registry) error {

	if err := validate.Required("street", "body", m.Street); err != nil {
		return err
	}

	return nil
}
