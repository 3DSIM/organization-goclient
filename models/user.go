// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// User user
// swagger:model user
type User struct {

	// app metadata
	AppMetadata *Auth0AppMetadata `json:"appMetadata,omitempty"`

	// blocked
	Blocked bool `json:"blocked,omitempty"`

	// created at
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// email verified
	EmailVerified bool `json:"emailVerified,omitempty"`

	// first name
	FirstName string `json:"firstName,omitempty"`

	// full name
	FullName string `json:"fullName,omitempty"`

	// last Ip address
	LastIPAddress string `json:"lastIpAddress,omitempty"`

	// last login
	LastLogin strfmt.DateTime `json:"lastLogin,omitempty"`

	// last name
	LastName string `json:"lastName,omitempty"`

	// logins count
	LoginsCount string `json:"loginsCount,omitempty"`

	// picture
	Picture string `json:"picture,omitempty"`

	// updated at
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// user Id
	UserID string `json:"userId,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppMetadata(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateAppMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.AppMetadata) { // not required
		return nil
	}

	if m.AppMetadata != nil {

		if err := m.AppMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appMetadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
