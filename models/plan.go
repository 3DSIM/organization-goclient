// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Plan plan
// swagger:model plan
type Plan struct {

	// allow web signup
	AllowWebSignup bool `json:"allowWebSignup,omitempty"`

	// available
	Available bool `json:"available,omitempty"`

	// billing interval
	BillingInterval string `json:"billingInterval,omitempty"`

	// cost
	Cost float32 `json:"cost,omitempty"`

	// description
	// Max Length: 256
	Description string `json:"description,omitempty"`

	// features
	Features []string `json:"features"`

	// id
	ID int32 `json:"id,omitempty"`

	// name
	// Required: true
	// Max Length: 100
	Name *string `json:"name"`

	// payment method
	PaymentMethod string `json:"paymentMethod,omitempty"`

	// plan group
	// Max Length: 64
	PlanGroup string `json:"planGroup,omitempty"`

	// plan modules
	PlanModules []*PlanModule `json:"planModules"`

	// running simulation limit
	// Required: true
	RunningSimulationLimit *int32 `json:"runningSimulationLimit"`

	// trial period days
	// Required: true
	TrialPeriodDays *int32 `json:"trialPeriodDays"`
}

// Validate validates this plan
func (m *Plan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillingInterval(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFeatures(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePaymentMethod(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePlanGroup(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePlanModules(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRunningSimulationLimit(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTrialPeriodDays(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var planTypeBillingIntervalPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Monthly","Yearly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		planTypeBillingIntervalPropEnum = append(planTypeBillingIntervalPropEnum, v)
	}
}

const (
	// PlanBillingIntervalMonthly captures enum value "Monthly"
	PlanBillingIntervalMonthly string = "Monthly"
	// PlanBillingIntervalYearly captures enum value "Yearly"
	PlanBillingIntervalYearly string = "Yearly"
)

// prop value enum
func (m *Plan) validateBillingIntervalEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, planTypeBillingIntervalPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Plan) validateBillingInterval(formats strfmt.Registry) error {

	if swag.IsZero(m.BillingInterval) { // not required
		return nil
	}

	// value enum
	if err := m.validateBillingIntervalEnum("billingInterval", "body", m.BillingInterval); err != nil {
		return err
	}

	return nil
}

func (m *Plan) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 256); err != nil {
		return err
	}

	return nil
}

func (m *Plan) validateFeatures(formats strfmt.Registry) error {

	if swag.IsZero(m.Features) { // not required
		return nil
	}

	return nil
}

func (m *Plan) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 100); err != nil {
		return err
	}

	return nil
}

var planTypePaymentMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CreditCard","PurchaseOrder"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		planTypePaymentMethodPropEnum = append(planTypePaymentMethodPropEnum, v)
	}
}

const (
	// PlanPaymentMethodCreditCard captures enum value "CreditCard"
	PlanPaymentMethodCreditCard string = "CreditCard"
	// PlanPaymentMethodPurchaseOrder captures enum value "PurchaseOrder"
	PlanPaymentMethodPurchaseOrder string = "PurchaseOrder"
)

// prop value enum
func (m *Plan) validatePaymentMethodEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, planTypePaymentMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Plan) validatePaymentMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validatePaymentMethodEnum("paymentMethod", "body", m.PaymentMethod); err != nil {
		return err
	}

	return nil
}

func (m *Plan) validatePlanGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.PlanGroup) { // not required
		return nil
	}

	if err := validate.MaxLength("planGroup", "body", string(m.PlanGroup), 64); err != nil {
		return err
	}

	return nil
}

func (m *Plan) validatePlanModules(formats strfmt.Registry) error {

	if swag.IsZero(m.PlanModules) { // not required
		return nil
	}

	for i := 0; i < len(m.PlanModules); i++ {

		if swag.IsZero(m.PlanModules[i]) { // not required
			continue
		}

		if m.PlanModules[i] != nil {

			if err := m.PlanModules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("planModules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Plan) validateRunningSimulationLimit(formats strfmt.Registry) error {

	if err := validate.Required("runningSimulationLimit", "body", m.RunningSimulationLimit); err != nil {
		return err
	}

	return nil
}

func (m *Plan) validateTrialPeriodDays(formats strfmt.Registry) error {

	if err := validate.Required("trialPeriodDays", "body", m.TrialPeriodDays); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Plan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Plan) UnmarshalBinary(b []byte) error {
	var res Plan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
