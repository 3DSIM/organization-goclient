// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Auth0Organization auth0 organization
// swagger:model auth0Organization
type Auth0Organization struct {

	// name
	Name string `json:"name,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// roles
	Roles []string `json:"roles"`
}

// Validate validates this auth0 organization
func (m *Auth0Organization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRoles(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var auth0OrganizationRolesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Admin","User","SuperAdmin","AccountManager"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		auth0OrganizationRolesItemsEnum = append(auth0OrganizationRolesItemsEnum, v)
	}
}

func (m *Auth0Organization) validateRolesItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, auth0OrganizationRolesItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *Auth0Organization) validateRoles(formats strfmt.Registry) error {

	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	for i := 0; i < len(m.Roles); i++ {

		// value enum
		if err := m.validateRolesItemsEnum("roles"+"."+strconv.Itoa(i), "body", m.Roles[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Auth0Organization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Auth0Organization) UnmarshalBinary(b []byte) error {
	var res Auth0Organization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
