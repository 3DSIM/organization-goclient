// Code generated by counterfeiter. DO NOT EDIT.
package organizationfakes

import (
	"sync"

	"github.com/3dsim/organization-goclient/models"
	"github.com/3dsim/organization-goclient/organization"
)

type FakeClient struct {
	OrganizationsStub        func() ([]*models.Organization, error)
	organizationsMutex       sync.RWMutex
	organizationsArgsForCall []struct{}
	organizationsReturns     struct {
		result1 []*models.Organization
		result2 error
	}
	organizationsReturnsOnCall map[int]struct {
		result1 []*models.Organization
		result2 error
	}
	OrganizationStub        func(organizationID int32) (*models.Organization, error)
	organizationMutex       sync.RWMutex
	organizationArgsForCall []struct {
		organizationID int32
	}
	organizationReturns struct {
		result1 *models.Organization
		result2 error
	}
	organizationReturnsOnCall map[int]struct {
		result1 *models.Organization
		result2 error
	}
	SubscriptionsStub        func() ([]*models.Subscription, error)
	subscriptionsMutex       sync.RWMutex
	subscriptionsArgsForCall []struct{}
	subscriptionsReturns     struct {
		result1 []*models.Subscription
		result2 error
	}
	subscriptionsReturnsOnCall map[int]struct {
		result1 []*models.Subscription
		result2 error
	}
	UpdateSubscriptionStub        func(subscription *models.Subscription) (a *models.Subscription, err error)
	updateSubscriptionMutex       sync.RWMutex
	updateSubscriptionArgsForCall []struct {
		subscription *models.Subscription
	}
	updateSubscriptionReturns struct {
		result1 *models.Subscription
		result2 error
	}
	updateSubscriptionReturnsOnCall map[int]struct {
		result1 *models.Subscription
		result2 error
	}
	PlanStub        func(planID int32) (org *models.Plan, err error)
	planMutex       sync.RWMutex
	planArgsForCall []struct {
		planID int32
	}
	planReturns struct {
		result1 *models.Plan
		result2 error
	}
	planReturnsOnCall map[int]struct {
		result1 *models.Plan
		result2 error
	}
	OrganizationUsersStub        func(organizationID int32) (users []*models.User, err error)
	organizationUsersMutex       sync.RWMutex
	organizationUsersArgsForCall []struct {
		organizationID int32
	}
	organizationUsersReturns struct {
		result1 []*models.User
		result2 error
	}
	organizationUsersReturnsOnCall map[int]struct {
		result1 []*models.User
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) Organizations() ([]*models.Organization, error) {
	fake.organizationsMutex.Lock()
	ret, specificReturn := fake.organizationsReturnsOnCall[len(fake.organizationsArgsForCall)]
	fake.organizationsArgsForCall = append(fake.organizationsArgsForCall, struct{}{})
	fake.recordInvocation("Organizations", []interface{}{})
	fake.organizationsMutex.Unlock()
	if fake.OrganizationsStub != nil {
		return fake.OrganizationsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.organizationsReturns.result1, fake.organizationsReturns.result2
}

func (fake *FakeClient) OrganizationsCallCount() int {
	fake.organizationsMutex.RLock()
	defer fake.organizationsMutex.RUnlock()
	return len(fake.organizationsArgsForCall)
}

func (fake *FakeClient) OrganizationsReturns(result1 []*models.Organization, result2 error) {
	fake.OrganizationsStub = nil
	fake.organizationsReturns = struct {
		result1 []*models.Organization
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) OrganizationsReturnsOnCall(i int, result1 []*models.Organization, result2 error) {
	fake.OrganizationsStub = nil
	if fake.organizationsReturnsOnCall == nil {
		fake.organizationsReturnsOnCall = make(map[int]struct {
			result1 []*models.Organization
			result2 error
		})
	}
	fake.organizationsReturnsOnCall[i] = struct {
		result1 []*models.Organization
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Organization(organizationID int32) (*models.Organization, error) {
	fake.organizationMutex.Lock()
	ret, specificReturn := fake.organizationReturnsOnCall[len(fake.organizationArgsForCall)]
	fake.organizationArgsForCall = append(fake.organizationArgsForCall, struct {
		organizationID int32
	}{organizationID})
	fake.recordInvocation("Organization", []interface{}{organizationID})
	fake.organizationMutex.Unlock()
	if fake.OrganizationStub != nil {
		return fake.OrganizationStub(organizationID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.organizationReturns.result1, fake.organizationReturns.result2
}

func (fake *FakeClient) OrganizationCallCount() int {
	fake.organizationMutex.RLock()
	defer fake.organizationMutex.RUnlock()
	return len(fake.organizationArgsForCall)
}

func (fake *FakeClient) OrganizationArgsForCall(i int) int32 {
	fake.organizationMutex.RLock()
	defer fake.organizationMutex.RUnlock()
	return fake.organizationArgsForCall[i].organizationID
}

func (fake *FakeClient) OrganizationReturns(result1 *models.Organization, result2 error) {
	fake.OrganizationStub = nil
	fake.organizationReturns = struct {
		result1 *models.Organization
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) OrganizationReturnsOnCall(i int, result1 *models.Organization, result2 error) {
	fake.OrganizationStub = nil
	if fake.organizationReturnsOnCall == nil {
		fake.organizationReturnsOnCall = make(map[int]struct {
			result1 *models.Organization
			result2 error
		})
	}
	fake.organizationReturnsOnCall[i] = struct {
		result1 *models.Organization
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Subscriptions() ([]*models.Subscription, error) {
	fake.subscriptionsMutex.Lock()
	ret, specificReturn := fake.subscriptionsReturnsOnCall[len(fake.subscriptionsArgsForCall)]
	fake.subscriptionsArgsForCall = append(fake.subscriptionsArgsForCall, struct{}{})
	fake.recordInvocation("Subscriptions", []interface{}{})
	fake.subscriptionsMutex.Unlock()
	if fake.SubscriptionsStub != nil {
		return fake.SubscriptionsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.subscriptionsReturns.result1, fake.subscriptionsReturns.result2
}

func (fake *FakeClient) SubscriptionsCallCount() int {
	fake.subscriptionsMutex.RLock()
	defer fake.subscriptionsMutex.RUnlock()
	return len(fake.subscriptionsArgsForCall)
}

func (fake *FakeClient) SubscriptionsReturns(result1 []*models.Subscription, result2 error) {
	fake.SubscriptionsStub = nil
	fake.subscriptionsReturns = struct {
		result1 []*models.Subscription
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) SubscriptionsReturnsOnCall(i int, result1 []*models.Subscription, result2 error) {
	fake.SubscriptionsStub = nil
	if fake.subscriptionsReturnsOnCall == nil {
		fake.subscriptionsReturnsOnCall = make(map[int]struct {
			result1 []*models.Subscription
			result2 error
		})
	}
	fake.subscriptionsReturnsOnCall[i] = struct {
		result1 []*models.Subscription
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) UpdateSubscription(subscription *models.Subscription) (a *models.Subscription, err error) {
	fake.updateSubscriptionMutex.Lock()
	ret, specificReturn := fake.updateSubscriptionReturnsOnCall[len(fake.updateSubscriptionArgsForCall)]
	fake.updateSubscriptionArgsForCall = append(fake.updateSubscriptionArgsForCall, struct {
		subscription *models.Subscription
	}{subscription})
	fake.recordInvocation("UpdateSubscription", []interface{}{subscription})
	fake.updateSubscriptionMutex.Unlock()
	if fake.UpdateSubscriptionStub != nil {
		return fake.UpdateSubscriptionStub(subscription)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateSubscriptionReturns.result1, fake.updateSubscriptionReturns.result2
}

func (fake *FakeClient) UpdateSubscriptionCallCount() int {
	fake.updateSubscriptionMutex.RLock()
	defer fake.updateSubscriptionMutex.RUnlock()
	return len(fake.updateSubscriptionArgsForCall)
}

func (fake *FakeClient) UpdateSubscriptionArgsForCall(i int) *models.Subscription {
	fake.updateSubscriptionMutex.RLock()
	defer fake.updateSubscriptionMutex.RUnlock()
	return fake.updateSubscriptionArgsForCall[i].subscription
}

func (fake *FakeClient) UpdateSubscriptionReturns(result1 *models.Subscription, result2 error) {
	fake.UpdateSubscriptionStub = nil
	fake.updateSubscriptionReturns = struct {
		result1 *models.Subscription
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) UpdateSubscriptionReturnsOnCall(i int, result1 *models.Subscription, result2 error) {
	fake.UpdateSubscriptionStub = nil
	if fake.updateSubscriptionReturnsOnCall == nil {
		fake.updateSubscriptionReturnsOnCall = make(map[int]struct {
			result1 *models.Subscription
			result2 error
		})
	}
	fake.updateSubscriptionReturnsOnCall[i] = struct {
		result1 *models.Subscription
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Plan(planID int32) (org *models.Plan, err error) {
	fake.planMutex.Lock()
	ret, specificReturn := fake.planReturnsOnCall[len(fake.planArgsForCall)]
	fake.planArgsForCall = append(fake.planArgsForCall, struct {
		planID int32
	}{planID})
	fake.recordInvocation("Plan", []interface{}{planID})
	fake.planMutex.Unlock()
	if fake.PlanStub != nil {
		return fake.PlanStub(planID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.planReturns.result1, fake.planReturns.result2
}

func (fake *FakeClient) PlanCallCount() int {
	fake.planMutex.RLock()
	defer fake.planMutex.RUnlock()
	return len(fake.planArgsForCall)
}

func (fake *FakeClient) PlanArgsForCall(i int) int32 {
	fake.planMutex.RLock()
	defer fake.planMutex.RUnlock()
	return fake.planArgsForCall[i].planID
}

func (fake *FakeClient) PlanReturns(result1 *models.Plan, result2 error) {
	fake.PlanStub = nil
	fake.planReturns = struct {
		result1 *models.Plan
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) PlanReturnsOnCall(i int, result1 *models.Plan, result2 error) {
	fake.PlanStub = nil
	if fake.planReturnsOnCall == nil {
		fake.planReturnsOnCall = make(map[int]struct {
			result1 *models.Plan
			result2 error
		})
	}
	fake.planReturnsOnCall[i] = struct {
		result1 *models.Plan
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) OrganizationUsers(organizationID int32) (users []*models.User, err error) {
	fake.organizationUsersMutex.Lock()
	ret, specificReturn := fake.organizationUsersReturnsOnCall[len(fake.organizationUsersArgsForCall)]
	fake.organizationUsersArgsForCall = append(fake.organizationUsersArgsForCall, struct {
		organizationID int32
	}{organizationID})
	fake.recordInvocation("OrganizationUsers", []interface{}{organizationID})
	fake.organizationUsersMutex.Unlock()
	if fake.OrganizationUsersStub != nil {
		return fake.OrganizationUsersStub(organizationID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.organizationUsersReturns.result1, fake.organizationUsersReturns.result2
}

func (fake *FakeClient) OrganizationUsersCallCount() int {
	fake.organizationUsersMutex.RLock()
	defer fake.organizationUsersMutex.RUnlock()
	return len(fake.organizationUsersArgsForCall)
}

func (fake *FakeClient) OrganizationUsersArgsForCall(i int) int32 {
	fake.organizationUsersMutex.RLock()
	defer fake.organizationUsersMutex.RUnlock()
	return fake.organizationUsersArgsForCall[i].organizationID
}

func (fake *FakeClient) OrganizationUsersReturns(result1 []*models.User, result2 error) {
	fake.OrganizationUsersStub = nil
	fake.organizationUsersReturns = struct {
		result1 []*models.User
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) OrganizationUsersReturnsOnCall(i int, result1 []*models.User, result2 error) {
	fake.OrganizationUsersStub = nil
	if fake.organizationUsersReturnsOnCall == nil {
		fake.organizationUsersReturnsOnCall = make(map[int]struct {
			result1 []*models.User
			result2 error
		})
	}
	fake.organizationUsersReturnsOnCall[i] = struct {
		result1 []*models.User
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.organizationsMutex.RLock()
	defer fake.organizationsMutex.RUnlock()
	fake.organizationMutex.RLock()
	defer fake.organizationMutex.RUnlock()
	fake.subscriptionsMutex.RLock()
	defer fake.subscriptionsMutex.RUnlock()
	fake.updateSubscriptionMutex.RLock()
	defer fake.updateSubscriptionMutex.RUnlock()
	fake.planMutex.RLock()
	defer fake.planMutex.RUnlock()
	fake.organizationUsersMutex.RLock()
	defer fake.organizationUsersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ organization.Client = new(FakeClient)
