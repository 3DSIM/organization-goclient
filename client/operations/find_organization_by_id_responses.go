package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/organization-goclient/models"
)

// FindOrganizationByIDReader is a Reader for the FindOrganizationByID structure.
type FindOrganizationByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindOrganizationByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewFindOrganizationByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewFindOrganizationByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewFindOrganizationByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewFindOrganizationByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewFindOrganizationByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewFindOrganizationByIDOK creates a FindOrganizationByIDOK with default headers values
func NewFindOrganizationByIDOK() *FindOrganizationByIDOK {
	return &FindOrganizationByIDOK{}
}

/*FindOrganizationByIDOK handles this case with default header values.

Organization found
*/
type FindOrganizationByIDOK struct {
	Payload *models.Organization
}

func (o *FindOrganizationByIDOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{id}][%d] findOrganizationByIdOK  %+v", 200, o.Payload)
}

func (o *FindOrganizationByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Organization)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindOrganizationByIDUnauthorized creates a FindOrganizationByIDUnauthorized with default headers values
func NewFindOrganizationByIDUnauthorized() *FindOrganizationByIDUnauthorized {
	return &FindOrganizationByIDUnauthorized{}
}

/*FindOrganizationByIDUnauthorized handles this case with default header values.

Not authorized
*/
type FindOrganizationByIDUnauthorized struct {
	Payload *models.Error
}

func (o *FindOrganizationByIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /organizations/{id}][%d] findOrganizationByIdUnauthorized  %+v", 401, o.Payload)
}

func (o *FindOrganizationByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindOrganizationByIDForbidden creates a FindOrganizationByIDForbidden with default headers values
func NewFindOrganizationByIDForbidden() *FindOrganizationByIDForbidden {
	return &FindOrganizationByIDForbidden{}
}

/*FindOrganizationByIDForbidden handles this case with default header values.

Forbidden
*/
type FindOrganizationByIDForbidden struct {
	Payload *models.Error
}

func (o *FindOrganizationByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /organizations/{id}][%d] findOrganizationByIdForbidden  %+v", 403, o.Payload)
}

func (o *FindOrganizationByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindOrganizationByIDNotFound creates a FindOrganizationByIDNotFound with default headers values
func NewFindOrganizationByIDNotFound() *FindOrganizationByIDNotFound {
	return &FindOrganizationByIDNotFound{}
}

/*FindOrganizationByIDNotFound handles this case with default header values.

Organization not found
*/
type FindOrganizationByIDNotFound struct {
	Payload *models.Error
}

func (o *FindOrganizationByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /organizations/{id}][%d] findOrganizationByIdNotFound  %+v", 404, o.Payload)
}

func (o *FindOrganizationByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindOrganizationByIDDefault creates a FindOrganizationByIDDefault with default headers values
func NewFindOrganizationByIDDefault(code int) *FindOrganizationByIDDefault {
	return &FindOrganizationByIDDefault{
		_statusCode: code,
	}
}

/*FindOrganizationByIDDefault handles this case with default header values.

unexpected error
*/
type FindOrganizationByIDDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the find organization by Id default response
func (o *FindOrganizationByIDDefault) Code() int {
	return o._statusCode
}

func (o *FindOrganizationByIDDefault) Error() string {
	return fmt.Sprintf("[GET /organizations/{id}][%d] findOrganizationById default  %+v", o._statusCode, o.Payload)
}

func (o *FindOrganizationByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
