package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostOrganizations Create an organization
*/
func (a *Client) PostOrganizations(params *PostOrganizationsParams, authInfo runtime.ClientAuthInfoWriter) (*PostOrganizationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOrganizationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostOrganizations",
		Method:             "POST",
		PathPattern:        "/organizations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostOrganizationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOrganizationsCreated), nil

}

/*
PostOrganizationsIDUsers Create a user within an organization
*/
func (a *Client) PostOrganizationsIDUsers(params *PostOrganizationsIDUsersParams, authInfo runtime.ClientAuthInfoWriter) (*PostOrganizationsIDUsersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOrganizationsIDUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostOrganizationsIDUsers",
		Method:             "POST",
		PathPattern:        "/organizations/{id}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostOrganizationsIDUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOrganizationsIDUsersCreated), nil

}

/*
FindOrganizationByID Returns a single organization
*/
func (a *Client) FindOrganizationByID(params *FindOrganizationByIDParams, authInfo runtime.ClientAuthInfoWriter) (*FindOrganizationByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindOrganizationByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findOrganizationById",
		Method:             "GET",
		PathPattern:        "/organizations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindOrganizationByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FindOrganizationByIDOK), nil

}

/*
GetImpersonateURLForUser Gets a URL with a token that allows the caller to login as this user
*/
func (a *Client) GetImpersonateURLForUser(params *GetImpersonateURLForUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetImpersonateURLForUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImpersonateURLForUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImpersonateURLForUser",
		Method:             "GET",
		PathPattern:        "/users/{id}/impersonateurl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetImpersonateURLForUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImpersonateURLForUserOK), nil

}

/*
GetOrganizations Get a list of organizations
*/
func (a *Client) GetOrganizations(params *GetOrganizationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizations",
		Method:             "GET",
		PathPattern:        "/organizations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrganizationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganizationsOK), nil

}

/*
GetUsersInOrganization Get the list of users in an organization
*/
func (a *Client) GetUsersInOrganization(params *GetUsersInOrganizationParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsersInOrganization",
		Method:             "GET",
		PathPattern:        "/organizations/{id}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsersInOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersInOrganizationOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
